var _user$project$Model$primaryColor = _debois$elm_mdl$Material_Options$cs('primaryColor');
var _user$project$Model$slotChangeTo = F3(
	function (oldSlots, id, value) {
		return _elm_lang$core$Native_Utils.update(
			oldSlots,
			{
				main: A3(_elm_lang$core$Array$set, id, value, oldSlots.main)
			});
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {result: a, topics: b, currentTopics: c, docs: d, currentDocument: e, terms: f, currentTerm: g, tabs: h, currentTab: i, raised: j, settings: k, slots: l, mdl: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$Settings = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {showTopics: a, showDocuments: b, showTerms: c, showSaved: d, bottom: e, view2: f, showSlotDialoge: g, search: h, error: i, slotToDelete: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$Slots = F2(
	function (a, b) {
		return {main: a, more: b};
	});
var _user$project$Model$None = {ctor: 'None'};
var _user$project$Model$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Model$ExecCmd = function (a) {
	return {ctor: 'ExecCmd', _0: a};
};
var _user$project$Model$NewFrames = function (a) {
	return {ctor: 'NewFrames', _0: a};
};
var _user$project$Model$NewTerms = function (a) {
	return {ctor: 'NewTerms', _0: a};
};
var _user$project$Model$NewDocs = function (a) {
	return {ctor: 'NewDocs', _0: a};
};
var _user$project$Model$NewDocument = function (a) {
	return {ctor: 'NewDocument', _0: a};
};
var _user$project$Model$NewTopics = function (a) {
	return {ctor: 'NewTopics', _0: a};
};
var _user$project$Model$ToggleShowSaved = {ctor: 'ToggleShowSaved'};
var _user$project$Model$ToggleView2 = {ctor: 'ToggleView2'};
var _user$project$Model$ToggleBottom = {ctor: 'ToggleBottom'};
var _user$project$Model$UpdateSlot = F2(
	function (a, b) {
		return {ctor: 'UpdateSlot', _0: a, _1: b};
	});
var _user$project$Model$ChoseSlotDialog = function (a) {
	return {ctor: 'ChoseSlotDialog', _0: a};
};
var _user$project$Model$HideDocuments = function (a) {
	return {ctor: 'HideDocuments', _0: a};
};
var _user$project$Model$ShowDocuments = function (a) {
	return {ctor: 'ShowDocuments', _0: a};
};
var _user$project$Model$HideTerms = function (a) {
	return {ctor: 'HideTerms', _0: a};
};
var _user$project$Model$ShowTerms = function (a) {
	return {ctor: 'ShowTerms', _0: a};
};
var _user$project$Model$HideTopics = function (a) {
	return {ctor: 'HideTopics', _0: a};
};
var _user$project$Model$ShowTopics = function (a) {
	return {ctor: 'ShowTopics', _0: a};
};
var _user$project$Model$DeleteSlot = F2(
	function (a, b) {
		return {ctor: 'DeleteSlot', _0: a, _1: b};
	});
var _user$project$Model$RemoveTopic = function (a) {
	return {ctor: 'RemoveTopic', _0: a};
};
var _user$project$Model$ChangeCurrentDoc = F2(
	function (a, b) {
		return {ctor: 'ChangeCurrentDoc', _0: a, _1: b};
	});
var _user$project$Model$Raise = function (a) {
	return {ctor: 'Raise', _0: a};
};
var _user$project$Model$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Model$Found = function (a) {
	return {ctor: 'Found', _0: a};
};
var _user$project$Model$Search = function (a) {
	return {ctor: 'Search', _0: a};
};
var _user$project$Model$ErrorTab = F2(
	function (a, b) {
		return {ctor: 'ErrorTab', _0: a, _1: b};
	});
var _user$project$Model$DocumentTab = F2(
	function (a, b) {
		return {ctor: 'DocumentTab', _0: a, _1: b};
	});
var _user$project$Model$PreviewTab = {ctor: 'PreviewTab'};
var _user$project$Model$Documentresult = function (a) {
	return {ctor: 'Documentresult', _0: a};
};
var _user$project$Model$Termresult = function (a) {
	return {ctor: 'Termresult', _0: a};
};
var _user$project$Model$Topicresult = function (a) {
	return {ctor: 'Topicresult', _0: a};
};
var _user$project$Model$ErrorSlot = {ctor: 'ErrorSlot'};
var _user$project$Model$slotGetFirstIdSince = F3(
	function (slots, view, id) {
		slotGetFirstIdSince:
		while (true) {
			var getView = function () {
				var _p0 = A2(_elm_lang$core$Array$get, id, slots.main);
				if (_p0.ctor === 'Just') {
					return _p0._0;
				} else {
					return _user$project$Model$ErrorSlot;
				}
			}();
			if (_elm_lang$core$Native_Utils.eq(getView, _user$project$Model$ErrorSlot)) {
				return -1;
			} else {
				if (_elm_lang$core$Native_Utils.eq(getView, view)) {
					return id;
				} else {
					var _v1 = slots,
						_v2 = view,
						_v3 = id + 1;
					slots = _v1;
					view = _v2;
					id = _v3;
					continue slotGetFirstIdSince;
				}
			}
		}
	});
var _user$project$Model$slotGetFirstId = F2(
	function (slots, view) {
		return A3(_user$project$Model$slotGetFirstIdSince, slots, view, 0);
	});
var _user$project$Model$slotGet = F2(
	function (slots, slotId) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Model$ErrorSlot,
			A2(_elm_lang$core$Array$get, slotId, slots.main));
	});
var _user$project$Model$slotFromTo = F3(
	function (slots, from, to) {
		var findSlot = A2(_user$project$Model$slotGetFirstId, slots, from);
		return _elm_lang$core$Native_Utils.eq(findSlot, -1) ? A3(
			_user$project$Model$slotChangeTo,
			A3(
				_user$project$Model$slotChangeTo,
				A3(
					_user$project$Model$slotChangeTo,
					_elm_lang$core$Native_Utils.update(
						slots,
						{
							more: {
								ctor: '::',
								_0: A2(_user$project$Model$slotGet, slots, 0),
								_1: slots.more
							}
						}),
					0,
					A2(_user$project$Model$slotGet, slots, 1)),
				1,
				A2(_user$project$Model$slotGet, slots, 2)),
			2,
			to) : A3(_user$project$Model$slotChangeTo, slots, findSlot, to);
	});
var _user$project$Model$Empty = {ctor: 'Empty'};
var _user$project$Model$slotRemove = F2(
	function (slots, removeId) {
		var moreTail = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			_elm_lang$core$List$tail(slots.more));
		var moreHead = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Model$Empty,
			_elm_lang$core$List$head(slots.more));
		var dir = _elm_lang$core$Native_Utils.eq(moreHead, _user$project$Model$Empty) ? 1 : -1;
		var nextSlot = function (id) {
			return A2(_user$project$Model$slotGet, slots, id + dir);
		};
		var nextResult = F2(
			function (id, view) {
				return _elm_lang$core$Native_Utils.eq(
					nextSlot(id),
					_user$project$Model$ErrorSlot) ? moreHead : ((_elm_lang$core$Native_Utils.cmp(id * dir, removeId * dir) > -1) ? nextSlot(id) : view);
			});
		return _elm_lang$core$Native_Utils.update(
			slots,
			{
				main: A2(_elm_lang$core$Array$indexedMap, nextResult, slots.main),
				more: moreTail
			});
	});
var _user$project$Model$Dialog = {ctor: 'Dialog'};
var _user$project$Model$DocumentsView = function (a) {
	return {ctor: 'DocumentsView', _0: a};
};
var _user$project$Model$TopicsView = function (a) {
	return {ctor: 'TopicsView', _0: a};
};
var _user$project$Model$TermsView = function (a) {
	return {ctor: 'TermsView', _0: a};
};
