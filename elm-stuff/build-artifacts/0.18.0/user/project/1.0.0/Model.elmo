var _user$project$Model$slotChangeTo = F3(
	function (oldSlots, id, value) {
		return _elm_lang$core$Native_Utils.update(
			oldSlots,
			{
				main: A3(_elm_lang$core$Array$set, id, value, oldSlots.main)
			});
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {result: a, topics: b, currentTopics: c, articles: d, currentArticle: e, wordList: f, currentWord: g, tabs: h, currentTab: i, raised: j, settings: k, slots: l, mdl: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$Topic = F3(
	function (a, b, c) {
		return {topicID: a, topicName: b, words: c};
	});
var _user$project$Model$Article = F6(
	function (a, b, c, d, e, f) {
		return {articleID: a, rankedTopics: b, words: c, title: d, date: e, text: f};
	});
var _user$project$Model$Settings = F8(
	function (a, b, c, d, e, f, g, h) {
		return {showTopics: a, showArticles: b, showWordlist: c, showSaved: d, bottom: e, view2: f, showSlotDialoge: g, search: h};
	});
var _user$project$Model$Slots = F2(
	function (a, b) {
		return {main: a, more: b};
	});
var _user$project$Model$None = {ctor: 'None'};
var _user$project$Model$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Model$ToggleShowSaved = {ctor: 'ToggleShowSaved'};
var _user$project$Model$ToggleView2 = {ctor: 'ToggleView2'};
var _user$project$Model$ToggleBottom = {ctor: 'ToggleBottom'};
var _user$project$Model$UpdateSlot = F2(
	function (a, b) {
		return {ctor: 'UpdateSlot', _0: a, _1: b};
	});
var _user$project$Model$ChoseSlotDialog = function (a) {
	return {ctor: 'ChoseSlotDialog', _0: a};
};
var _user$project$Model$HideArticles = function (a) {
	return {ctor: 'HideArticles', _0: a};
};
var _user$project$Model$ShowArticles = function (a) {
	return {ctor: 'ShowArticles', _0: a};
};
var _user$project$Model$HideWordList = function (a) {
	return {ctor: 'HideWordList', _0: a};
};
var _user$project$Model$ShowWordList = function (a) {
	return {ctor: 'ShowWordList', _0: a};
};
var _user$project$Model$HideTopics = function (a) {
	return {ctor: 'HideTopics', _0: a};
};
var _user$project$Model$ShowTopics = function (a) {
	return {ctor: 'ShowTopics', _0: a};
};
var _user$project$Model$RemoveTopic = function (a) {
	return {ctor: 'RemoveTopic', _0: a};
};
var _user$project$Model$ChangeCurrentArticle = F2(
	function (a, b) {
		return {ctor: 'ChangeCurrentArticle', _0: a, _1: b};
	});
var _user$project$Model$Raise = function (a) {
	return {ctor: 'Raise', _0: a};
};
var _user$project$Model$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Model$Found = function (a) {
	return {ctor: 'Found', _0: a};
};
var _user$project$Model$Search = function (a) {
	return {ctor: 'Search', _0: a};
};
var _user$project$Model$ErrorTab = F2(
	function (a, b) {
		return {ctor: 'ErrorTab', _0: a, _1: b};
	});
var _user$project$Model$ArticleTab = F2(
	function (a, b) {
		return {ctor: 'ArticleTab', _0: a, _1: b};
	});
var _user$project$Model$PreviewTab = {ctor: 'PreviewTab'};
var _user$project$Model$Articleresult = function (a) {
	return {ctor: 'Articleresult', _0: a};
};
var _user$project$Model$Wordresult = function (a) {
	return {ctor: 'Wordresult', _0: a};
};
var _user$project$Model$Topicresult = function (a) {
	return {ctor: 'Topicresult', _0: a};
};
var _user$project$Model$ErrorSlot = {ctor: 'ErrorSlot'};
var _user$project$Model$slotGetFirstIdSince = F3(
	function (slots, view, id) {
		slotGetFirstIdSince:
		while (true) {
			var getView = function () {
				var _p0 = A2(_elm_lang$core$Array$get, id, slots.main);
				if (_p0.ctor === 'Just') {
					return _p0._0;
				} else {
					return _user$project$Model$ErrorSlot;
				}
			}();
			if (_elm_lang$core$Native_Utils.eq(getView, _user$project$Model$ErrorSlot)) {
				return -1;
			} else {
				if (_elm_lang$core$Native_Utils.eq(getView, view)) {
					return id;
				} else {
					var _v1 = slots,
						_v2 = view,
						_v3 = id + 1;
					slots = _v1;
					view = _v2;
					id = _v3;
					continue slotGetFirstIdSince;
				}
			}
		}
	});
var _user$project$Model$slotGetFirstId = F2(
	function (slots, view) {
		return A3(_user$project$Model$slotGetFirstIdSince, slots, view, 0);
	});
var _user$project$Model$slotGet = F2(
	function (slots, slotId) {
		var _p1 = A2(_elm_lang$core$Array$get, slotId, slots.main);
		if (_p1.ctor === 'Just') {
			return _p1._0;
		} else {
			return _user$project$Model$ErrorSlot;
		}
	});
var _user$project$Model$slotFromTo = F3(
	function (slots, from, to) {
		var findSlot = A2(_user$project$Model$slotGetFirstId, slots, from);
		return _elm_lang$core$Native_Utils.eq(findSlot, -1) ? A3(
			_user$project$Model$slotChangeTo,
			A3(
				_user$project$Model$slotChangeTo,
				A3(
					_user$project$Model$slotChangeTo,
					_elm_lang$core$Native_Utils.update(
						slots,
						{
							more: {
								ctor: '::',
								_0: A2(_user$project$Model$slotGet, slots, 0),
								_1: slots.more
							}
						}),
					0,
					A2(_user$project$Model$slotGet, slots, 1)),
				1,
				A2(_user$project$Model$slotGet, slots, 2)),
			2,
			to) : A3(_user$project$Model$slotChangeTo, slots, findSlot, to);
	});
var _user$project$Model$Empty = {ctor: 'Empty'};
var _user$project$Model$slotRemove = F2(
	function (slots, id) {
		slotRemove:
		while (true) {
			var moreTail = function () {
				var _p2 = _elm_lang$core$List$tail(slots.more);
				if (_p2.ctor === 'Just') {
					return _p2._0;
				} else {
					return {ctor: '[]'};
				}
			}();
			var moreHead = function () {
				var _p3 = _elm_lang$core$List$head(slots.more);
				if (_p3.ctor === 'Just') {
					return _p3._0;
				} else {
					return _user$project$Model$Empty;
				}
			}();
			var nextId = _elm_lang$core$Native_Utils.eq(moreHead, _user$project$Model$Empty) ? (id + 1) : (id - 1);
			var nextSlot = A2(_user$project$Model$slotGet, slots, nextId);
			if (_elm_lang$core$Native_Utils.eq(nextSlot, _user$project$Model$ErrorSlot)) {
				return A3(
					_user$project$Model$slotChangeTo,
					_elm_lang$core$Native_Utils.update(
						slots,
						{more: moreTail}),
					id,
					moreHead);
			} else {
				var _v7 = A3(_user$project$Model$slotChangeTo, slots, id, nextSlot),
					_v8 = nextId;
				slots = _v7;
				id = _v8;
				continue slotRemove;
			}
		}
	});
var _user$project$Model$Dialog = {ctor: 'Dialog'};
var _user$project$Model$ArticlesView = function (a) {
	return {ctor: 'ArticlesView', _0: a};
};
var _user$project$Model$TopicsView = function (a) {
	return {ctor: 'TopicsView', _0: a};
};
var _user$project$Model$WordlistView = function (a) {
	return {ctor: 'WordlistView', _0: a};
};
