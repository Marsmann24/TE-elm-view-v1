var _user$project$Designdummy$flexValue = function (flex) {
	var _p0 = flex;
	switch (_p0) {
		case 4:
			return '4 3 80%';
		case 3:
			return '3 2 60%';
		case 2:
			return '2 2 40%';
		case 1:
			return '1 1 20%';
		default:
			return '0 0 0%';
	}
};
var _user$project$Designdummy$viewBody = function (model) {
	return A2(
		_debois$elm_mdl$Material_Options$div,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'display', '-ms-flex'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'display', '-webkit-flex'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'flex-direction', 'column'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'height', '100%'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Options$div,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'display', '-ms-flex'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'display', '-webkit-flex'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'flex-direction', 'row'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, '-ms-flex-direction', 'row'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, '-webkit-flex-direction', 'row'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'flex', '3 2 75%'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$List$append,
					{
						ctor: '::',
						_0: A2(
							_user$project$Articlesview$view,
							model,
							_user$project$Designdummy$flexValue(1)),
						_1: {ctor: '[]'}
					},
					model.row ? {
						ctor: '::',
						_0: A2(
							_user$project$Wordlistview$view,
							model,
							_user$project$Designdummy$flexValue(1)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Tabsview$view,
								model,
								_user$project$Designdummy$flexValue(3)),
							_1: {ctor: '[]'}
						}
					} : {
						ctor: '::',
						_0: A2(
							_user$project$Tabsview$view,
							model,
							_user$project$Designdummy$flexValue(4)),
						_1: {ctor: '[]'}
					})),
			_1: {
				ctor: '::',
				_0: _user$project$Topicsview$view(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Designdummy$viewHeader = function (model) {
	return A5(
		_debois$elm_mdl$Material_Textfield$render,
		_user$project$Model$Mdl,
		{
			ctor: '::',
			_0: 7,
			_1: {ctor: '[]'}
		},
		model.mdl,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Textfield$label('Expandable'),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Textfield$expandable('id-of-expandable-1'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Textfield$expandableIcon('search'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '20px 50px 10px'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Designdummy$view = function (model) {
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$LightGreen,
		_debois$elm_mdl$Material_Color$Lime,
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Model$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$fixedHeader,
				_1: {ctor: '[]'}
			},
			{
				header: {
					ctor: '::',
					_0: _user$project$Designdummy$viewHeader(model),
					_1: {ctor: '[]'}
				},
				drawer: {ctor: '[]'},
				tabs: {
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				},
				main: {
					ctor: '::',
					_0: _user$project$Designdummy$viewBody(model),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Designdummy$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'SelectTab':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTab: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Raise':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{raised: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeCurrentArticle':
				var newCurrentArticle = {cardID: _p1._0, article: _p1._1};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentArticle: newCurrentArticle}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveTopic':
				var newCurrentTopis = A2(
					_elm_lang$core$List$filter,
					function (x) {
						return !_elm_lang$core$Native_Utils.eq(x.topicID, _p1._0);
					},
					model.currentTopics);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTopics: newCurrentTopis}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowWordList':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{row: true, wordList: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HideWordList':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{row: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Model$Mdl, _p1._0, model);
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Designdummy$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Designdummy$main = _elm_lang$html$Html$program(
	{init: _user$project$Init$init, update: _user$project$Designdummy$update, view: _user$project$Designdummy$view, subscriptions: _user$project$Designdummy$subscriptions})();
