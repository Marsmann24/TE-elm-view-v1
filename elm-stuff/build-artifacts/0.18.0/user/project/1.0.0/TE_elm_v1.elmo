var _user$project$TE_elm_v1$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$TE_elm_v1$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'SelectTab':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTab: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Raise':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{raised: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveTopic':
				var newCurrentTopis = A2(
					_elm_lang$core$List$filter,
					function (x) {
						return !_elm_lang$core$Native_Utils.eq(x.id, _p0._0);
					},
					model.currentTopics);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTopics: newCurrentTopis}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Search':
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{search: true})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Found':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{search: false}),
							slots: A3(_user$project$Model$slotFromTo, oldSlots, _user$project$Model$Empty, _p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteSlot':
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{slotToDelete: _p0._0})
						}),
					_1: A3(_andrewMacmurray$elm_delay$Delay$after, 200, _elm_lang$core$Time$millisecond, _p0._1)
				};
			case 'ShowTopics':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showTopics: true}),
							slots: A3(
								_user$project$Model$slotFromTo,
								oldSlots,
								_user$project$Model$Empty,
								_user$project$Model$TopicsView(_p0._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HideTopics':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showTopics: false, slotToDelete: -1}),
							slots: A2(_user$project$Model$slotRemove, oldSlots, _p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowTerms':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showTerms: true}),
							slots: A3(
								_user$project$Model$slotFromTo,
								oldSlots,
								_user$project$Model$Empty,
								_user$project$Model$TermsView(_p0._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HideTerms':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showTerms: false, slotToDelete: -1}),
							slots: A2(_user$project$Model$slotRemove, oldSlots, _p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowDocuments':
				var contains = F2(
					function (term, document) {
						return A2(_elm_lang$core$List$member, term, document.terms);
					});
				var docs = model.docs;
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showDocuments: true}),
							slots: A3(
								_user$project$Model$slotFromTo,
								oldSlots,
								_user$project$Model$Empty,
								_user$project$Model$DocumentsView(docs))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HideDocuments':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showDocuments: false, slotToDelete: -1}),
							slots: A2(_user$project$Model$slotRemove, oldSlots, _p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChoseSlotDialog':
				var oldSlots = model.slots;
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showSlotDialoge: true}),
							slots: A3(_user$project$Model$slotChangeTo, oldSlots, _p0._0, _user$project$Model$Dialog)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateSlot':
				var oldSlots = model.slots;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							slots: A3(_user$project$Model$slotChangeTo, oldSlots, _p0._1, _p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleBottom':
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{bottom: !model.settings.bottom})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleView2':
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{view2: !model.settings.view2})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleShowSaved':
				var oldSettings = model.settings;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							settings: _elm_lang$core$Native_Utils.update(
								oldSettings,
								{showSaved: !model.settings.showSaved})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewTopics':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{topics: _p1._0.topics}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldSettings = model.settings;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								settings: _elm_lang$core$Native_Utils.update(
									oldSettings,
									{
										error: _elm_lang$core$Basics$toString(_p1._0)
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'NewDocument':
				var _p2 = _p0._0;
				if (_p2.ctor === 'Ok') {
					var _p3 = _p2._0;
					var oldTabs = model.tabs;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								tabs: A2(
									_elm_lang$core$List$append,
									oldTabs,
									{
										ctor: '::',
										_0: A2(_user$project$Model$DocumentTab, _p3.title, _p3),
										_1: {ctor: '[]'}
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldSettings = model.settings;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								settings: _elm_lang$core$Native_Utils.update(
									oldSettings,
									{
										error: _elm_lang$core$Basics$toString(_p2._0)
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'NewDocs':
				var _p4 = _p0._0;
				if (_p4.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{docs: _p4._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldSettings = model.settings;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								settings: _elm_lang$core$Native_Utils.update(
									oldSettings,
									{
										error: _elm_lang$core$Basics$toString(_p4._0)
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'NewTerms':
				var _p5 = _p0._0;
				if (_p5.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{terms: _p5._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var oldSettings = model.settings;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								settings: _elm_lang$core$Native_Utils.update(
									oldSettings,
									{
										error: _elm_lang$core$Basics$toString(_p5._0)
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'NewFrames':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ExecCmd':
				return {ctor: '_Tuple2', _0: model, _1: _p0._0};
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Model$Mdl, _p0._0, model);
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$TE_elm_v1$view = function (model) {
	return _user$project$Mainview_v2$view(model);
};
var _user$project$TE_elm_v1$main = _elm_lang$html$Html$program(
	{init: _user$project$Init$init, update: _user$project$TE_elm_v1$update, view: _user$project$TE_elm_v1$view, subscriptions: _user$project$TE_elm_v1$subscriptions})();
