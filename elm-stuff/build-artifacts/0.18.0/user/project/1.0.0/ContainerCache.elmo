var _user$project$ContainerCache$fillcache = F3(
	function (meta, index, page) {
		var _p0 = page;
		if (_p0.ctor === 'ToLoad') {
			return (_elm_lang$core$Native_Utils.cmp(index, meta.windowSize) < 1) ? _p0._1 : _elm_lang$core$Platform_Cmd$none;
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$ContainerCache$loadpage = F2(
	function (targetpage, targetcontainer) {
		var _p1 = targetpage;
		if (_p1.ctor === 'ToLoad') {
			return {ctor: '_Tuple2', _0: targetcontainer, _1: _p1._1};
		} else {
			return {ctor: '_Tuple2', _0: targetcontainer, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$ContainerCache$initializenewContainer = F2(
	function (meta, requestmaker) {
		return A2(
			_elm_lang$core$Array$initialize,
			meta.numOfPages,
			function (n) {
				if (_elm_lang$core$Native_Utils.cmp(n, meta.windowSize) > 0) {
					var metanew = _elm_lang$core$Native_Utils.update(
						meta,
						{currPage: n - meta.windowSize});
					return A2(requestmaker, metanew, n);
				} else {
					return A2(requestmaker, meta, n);
				}
			});
	});
var _user$project$ContainerCache$getpagetoload = F2(
	function (container, msg) {
		var _p2 = msg;
		if (_p2.ctor === 'NextPage') {
			return (container.meta.currPage + container.meta.windowSize) + 1;
		} else {
			return (container.meta.currPage - container.meta.windowSize) - 1;
		}
	});
var _user$project$ContainerCache$createMetadata = F6(
	function (name, numOfElem, ipp, cs, iden, decoder) {
		return {
			name: name,
			numOfItemsInContainer: numOfElem,
			itemsPerPage: ipp,
			numOfPages: _elm_lang$core$Basics$ceiling(
				_elm_lang$core$Basics$toFloat(numOfElem) / _elm_lang$core$Basics$toFloat(ipp)),
			windowSize: cs,
			currPage: 0,
			identifier: iden,
			decoder: decoder
		};
	});
var _user$project$ContainerCache$ContainerModel = F4(
	function (a, b, c, d) {
		return {arrayOfContainer: a, cache: b, newcontainer: c, log: d};
	});
var _user$project$ContainerCache$Container = F4(
	function (a, b, c, d) {
		return {meta: a, data: b, requestmaker: c, log: d};
	});
var _user$project$ContainerCache$Meta = F8(
	function (a, b, c, d, e, f, g, h) {
		return {name: a, numOfItemsInContainer: b, itemsPerPage: c, numOfPages: d, identifier: e, windowSize: f, currPage: g, decoder: h};
	});
var _user$project$ContainerCache$HandleError = function (a) {
	return {ctor: 'HandleError', _0: a};
};
var _user$project$ContainerCache$requestmaker = F2(
	function (meta, pagenumtodelete) {
		return _user$project$ContainerCache$HandleError('Default pagerequest');
	});
var _user$project$ContainerCache$ToLoad = F2(
	function (a, b) {
		return {ctor: 'ToLoad', _0: a, _1: b};
	});
var _user$project$ContainerCache$Loaded = function (a) {
	return {ctor: 'Loaded', _0: a};
};
var _user$project$ContainerCache$LoadNewPage = F3(
	function (a, b, c) {
		return {ctor: 'LoadNewPage', _0: a, _1: b, _2: c};
	});
var _user$project$ContainerCache$PageUpdate = F2(
	function (a, b) {
		return {ctor: 'PageUpdate', _0: a, _1: b};
	});
var _user$project$ContainerCache$CreateNewContainer = function (a) {
	return {ctor: 'CreateNewContainer', _0: a};
};
var _user$project$ContainerCache$UpdatePage = F2(
	function (a, b) {
		return {ctor: 'UpdatePage', _0: a, _1: b};
	});
var _user$project$ContainerCache$addpagetorequest = F2(
	function (msg, page) {
		return A2(_user$project$ContainerCache$UpdatePage, msg, page);
	});
var _user$project$ContainerCache$LoadCheckPage = F3(
	function (a, b, c) {
		return {ctor: 'LoadCheckPage', _0: a, _1: b, _2: c};
	});
var _user$project$ContainerCache$LoadNewContainer = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'LoadNewContainer', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$ContainerCache$PrevPage = {ctor: 'PrevPage'};
var _user$project$ContainerCache$NextPage = {ctor: 'NextPage'};
var _user$project$ContainerCache$Container_Error = function (a) {
	return {ctor: 'Container_Error', _0: a};
};
var _user$project$ContainerCache$ContainerError = function (a) {
	return {ctor: 'ContainerError', _0: a};
};
var _user$project$ContainerCache$ManageContainer_Error = function (a) {
	return {ctor: 'ManageContainer_Error', _0: a};
};
var _user$project$ContainerCache$NoError = {ctor: 'NoError'};
var _user$project$ContainerCache$createContainer = F3(
	function (meta, data, req) {
		return {meta: meta, data: data, requestmaker: req, log: _user$project$ContainerCache$NoError};
	});
var _user$project$ContainerCache$defaultContainer = A3(
	_user$project$ContainerCache$createContainer,
	A6(
		_user$project$ContainerCache$createMetadata,
		'DefaultContainer - Error',
		-1,
		-1,
		-1,
		-1,
		_elm_lang$core$Json_Decode$fail('DefaultContainer - Decoder Error')),
	_elm_lang$core$Array$empty,
	_user$project$ContainerCache$requestmaker);
var _user$project$ContainerCache$updatecontainer = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'LoadNewContainer':
				var _p4 = _p3._6;
				var newMeta = A6(_user$project$ContainerCache$createMetadata, _p3._0, _p3._1, _p3._2, _p3._3, _p3._4, _p3._5);
				var loadedContainer = A2(_user$project$ContainerCache$initializenewContainer, newMeta, _p4);
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$ContainerCache$createContainer, newMeta, loadedContainer, _p4),
					_1: _elm_lang$core$Platform_Cmd$batch(
						_elm_lang$core$Array$toList(
							A2(
								_elm_lang$core$Array$indexedMap,
								_user$project$ContainerCache$fillcache(newMeta),
								loadedContainer)))
				};
			case 'LoadCheckPage':
				var _p5 = _p3._2;
				if (_p5.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A3(
							_user$project$ContainerCache$createContainer,
							_p3._0,
							A3(
								_elm_lang$core$Array$set,
								_p3._1,
								_user$project$ContainerCache$Loaded(_p5._0),
								model.data),
							model.requestmaker),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								log: _user$project$ContainerCache$ContainerError(_p5._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$ContainerCache$switchpage = F3(
	function (factor, model, maybepage) {
		var pagenumtoload = model.meta.currPage + ((model.meta.windowSize + 1) * factor);
		var nextpage = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$ContainerCache$HandleError('switchpage nextpage'),
			A2(_elm_lang$core$Array$get, pagenumtoload, model.data));
		var pagenumtodelete = model.meta.currPage - (model.meta.windowSize * factor);
		var deletedpage = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$ContainerCache$HandleError('switchpage deletedpage'),
			A2(_elm_lang$core$Array$get, pagenumtodelete, model.data));
		var metahelp = model.meta;
		var newmeta = _elm_lang$core$Native_Utils.update(
			metahelp,
			{currPage: metahelp.currPage + (1 * factor)});
		var newdeletemeta = _elm_lang$core$Native_Utils.update(
			metahelp,
			{currPage: pagenumtodelete + (metahelp.windowSize * factor)});
		var pagetodelete = A2(model.requestmaker, newdeletemeta, pagenumtodelete);
		var _p6 = nextpage;
		if (_p6.ctor === 'ToLoad') {
			var _p7 = maybepage;
			if (_p7.ctor === 'Just') {
				return {
					ctor: '_Tuple3',
					_0: A3(
						_user$project$ContainerCache$createContainer,
						newmeta,
						A3(
							_elm_lang$core$Array$set,
							pagenumtoload,
							_p7._0,
							A3(_elm_lang$core$Array$set, pagenumtodelete, pagetodelete, model.data)),
						model.requestmaker),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: {ctor: '_Tuple2', _0: pagenumtodelete, _1: deletedpage}
				};
			} else {
				return {
					ctor: '_Tuple3',
					_0: A3(
						_user$project$ContainerCache$createContainer,
						newmeta,
						A3(_elm_lang$core$Array$set, pagenumtodelete, pagetodelete, model.data),
						model.requestmaker),
					_1: _p6._1,
					_2: {ctor: '_Tuple2', _0: pagenumtodelete, _1: deletedpage}
				};
			}
		} else {
			return {
				ctor: '_Tuple3',
				_0: A3(_user$project$ContainerCache$createContainer, newmeta, model.data, model.requestmaker),
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: {
					ctor: '_Tuple2',
					_0: -1,
					_1: _user$project$ContainerCache$HandleError('switchpage not ToLoad')
				}
			};
		}
	});
var _user$project$ContainerCache$updatepage = F2(
	function (msg, model) {
		var _p8 = msg;
		if (_p8.ctor === 'UpdatePage') {
			if (_p8._0.ctor === 'NextPage') {
				return (_elm_lang$core$Native_Utils.cmp(model.meta.currPage + 1, model.meta.numOfPages) < 0) ? A3(_user$project$ContainerCache$switchpage, 1, model, _p8._1) : {
					ctor: '_Tuple3',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: {
						ctor: '_Tuple2',
						_0: -1,
						_1: _user$project$ContainerCache$HandleError('updatepage NextPage')
					}
				};
			} else {
				return (_elm_lang$core$Native_Utils.cmp(0, model.meta.currPage) < 0) ? A3(_user$project$ContainerCache$switchpage, -1, model, _p8._1) : {
					ctor: '_Tuple3',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: {
						ctor: '_Tuple2',
						_0: -1,
						_1: _user$project$ContainerCache$HandleError('updatepage PrevPage')
					}
				};
			}
		} else {
			return {
				ctor: '_Tuple3',
				_0: model,
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: {
					ctor: '_Tuple2',
					_0: -1,
					_1: _user$project$ContainerCache$HandleError('updatepage No UpdatePage')
				}
			};
		}
	});
var _user$project$ContainerCache$newContainerModel = F3(
	function (array, cachesize, newcontainer) {
		return {
			arrayOfContainer: array,
			cache: _lukewestby$lru_cache$LruCache$empty(cachesize),
			newcontainer: newcontainer,
			log: _user$project$ContainerCache$NoError
		};
	});
var _user$project$ContainerCache$update = F2(
	function (msg, model) {
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'CreateNewContainer':
				var _p10 = A2(_user$project$ContainerCache$updatecontainer, _p9._0, model.newcontainer);
				var container = _p10._0;
				var command = _p10._1;
				var _p11 = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$ContainerCache$HandleError('CreateNewContainer'),
					A2(_elm_lang$core$Array$get, 0, container.data));
				if (_p11.ctor === 'Loaded') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								arrayOfContainer: A2(_elm_lang$core$Array$push, container, model.arrayOfContainer)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newcontainer: container}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$ContainerCache$CreateNewContainer, command)
					};
				}
			case 'PageUpdate':
				var _p17 = _p9._1;
				var _p16 = _p9._0;
				var targetcontainer = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$ContainerCache$defaultContainer,
					A2(_elm_lang$core$Array$get, _p16, model.arrayOfContainer));
				var pagetoload = A2(_user$project$ContainerCache$getpagetoload, targetcontainer, _p17);
				var _p12 = A2(
					_lukewestby$lru_cache$LruCache$get,
					{ctor: '_Tuple2', _0: _p16, _1: pagetoload},
					model.cache);
				var newcache = _p12._0;
				var maybepageincache = _p12._1;
				var updateMsg = A2(_user$project$ContainerCache$addpagetorequest, _p17, maybepageincache);
				var _p13 = A2(_user$project$ContainerCache$updatepage, updateMsg, targetcontainer);
				var container = _p13._0;
				var command = _p13._1;
				var pageforcachenum = _p13._2._0;
				var pageforcache = _p13._2._1;
				var newcontainerarray = (_elm_lang$core$Native_Utils.cmp(pageforcachenum, 0) > -1) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							arrayOfContainer: A3(_elm_lang$core$Array$set, _p16, container, model.arrayOfContainer),
							cache: A3(
								_lukewestby$lru_cache$LruCache$insert,
								{ctor: '_Tuple2', _0: _p16, _1: pageforcachenum},
								pageforcache,
								newcache)
						}),
					_1: A2(
						_elm_lang$core$Platform_Cmd$map,
						A2(_user$project$ContainerCache$LoadNewPage, _p16, command),
						command)
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							arrayOfContainer: A3(_elm_lang$core$Array$set, _p16, container, model.arrayOfContainer)
						}),
					_1: A2(
						_elm_lang$core$Platform_Cmd$map,
						A2(_user$project$ContainerCache$LoadNewPage, _p16, command),
						command)
				};
				var nextpagenum = _elm_lang$core$Native_Utils.eq(_p17, _user$project$ContainerCache$NextPage) ? (targetcontainer.meta.currPage + 1) : (targetcontainer.meta.currPage - 1);
				var targetpage = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$ContainerCache$HandleError('PageUpdate targetpage'),
					A2(_elm_lang$core$Array$get, nextpagenum, targetcontainer.data));
				var _p14 = targetpage;
				if (_p14.ctor === 'ToLoad') {
					if (_elm_lang$core$Native_Utils.cmp(targetcontainer.meta.windowSize, 0) > 0) {
						var _p15 = A2(_user$project$ContainerCache$loadpage, targetpage, targetcontainer);
						var newcontainer = _p15._0;
						var reloadcommand = _p15._1;
						return (_elm_lang$core$Native_Utils.cmp(pageforcachenum, 0) > -1) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									arrayOfContainer: A3(_elm_lang$core$Array$set, _p16, newcontainer, model.arrayOfContainer),
									cache: A3(
										_lukewestby$lru_cache$LruCache$insert,
										{ctor: '_Tuple2', _0: _p16, _1: pageforcachenum},
										pageforcache,
										newcache)
								}),
							_1: A2(
								_elm_lang$core$Platform_Cmd$map,
								A2(_user$project$ContainerCache$LoadNewPage, _p16, reloadcommand),
								reloadcommand)
						} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									arrayOfContainer: A3(_elm_lang$core$Array$set, _p16, newcontainer, model.arrayOfContainer)
								}),
							_1: A2(
								_elm_lang$core$Platform_Cmd$map,
								A2(_user$project$ContainerCache$LoadNewPage, _p16, reloadcommand),
								reloadcommand)
						};
					} else {
						return newcontainerarray;
					}
				} else {
					return newcontainerarray;
				}
			default:
				var _p20 = _p9._0;
				var _p19 = _p9._1;
				var _p18 = A2(
					_user$project$ContainerCache$updatecontainer,
					_p9._2,
					A2(
						_elm_lang$core$Maybe$withDefault,
						_user$project$ContainerCache$defaultContainer,
						A2(_elm_lang$core$Array$get, _p20, model.arrayOfContainer)));
				var container = _p18._0;
				var cmdnone = _p18._1;
				return _elm_lang$core$Native_Utils.eq(container.log, _user$project$ContainerCache$NoError) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							arrayOfContainer: A3(_elm_lang$core$Array$set, _p20, container, model.arrayOfContainer),
							log: _user$project$ContainerCache$NoError
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							log: _user$project$ContainerCache$Container_Error(container.log)
						}),
					_1: A2(
						_elm_lang$core$Platform_Cmd$map,
						A2(_user$project$ContainerCache$LoadNewPage, _p20, _p19),
						_p19)
				};
		}
	});
