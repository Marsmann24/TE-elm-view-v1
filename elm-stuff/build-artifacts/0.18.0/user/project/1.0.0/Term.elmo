var _user$project$Term$termSortingDecoder = _elm_lang$core$Json_Decode$list(
	A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (x, y) {
				return {id: x, relevance: y};
			}),
		A2(_elm_lang$core$Json_Decode$field, 'TermId', _elm_lang$core$Json_Decode$int),
		A2(_elm_lang$core$Json_Decode$field, 'relevance', _elm_lang$core$Json_Decode$int)));
var _user$project$Term$termId2Term = F2(
	function (terms, termId) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(x.id, termId);
				},
				terms));
	});
var _user$project$Term$Term = F4(
	function (a, b, c, d) {
		return {id: a, name: b, wordtype: c, count: d};
	});
var _user$project$Term$matchTermsById = function (termsorting) {
	return A2(
		_elm_lang$core$List$map,
		function (x) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				A4(_user$project$Term$Term, -1, 'Error: Not matching.', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Dict$get, x, termsorting.items));
		},
		termsorting.sorting);
};
var _user$project$Term$matchTermsortingById = function (termsresult) {
	var termsorting = {
		items: termsresult.terms,
		sorting: A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.id;
			},
			A2(
				_elm_lang$core$List$sortBy,
				function (_) {
					return _.relevance;
				},
				_elm_lang$core$Tuple$second(termsresult.topic)))
	};
	return _user$project$Term$matchTermsById(termsorting);
};
var _user$project$Term$termDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Term$Term,
	A2(_elm_lang$core$Json_Decode$field, 'TERM_ID', _user$project$Decoderhelper$stringAsInt),
	A2(_elm_lang$core$Json_Decode$field, 'TERM_NAME', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'WORDTYPE$WORDTYPE', _elm_lang$core$Json_Decode$int)),
	_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing));
var _user$project$Term$bestTermsDecoder = A2(
	_elm_lang$core$Json_Decode$map,
	_user$project$Term$matchTermsById,
	A2(
		_elm_lang$core$Json_Decode$field,
		'61',
		A2(
			_user$project$Decoderhelper$listheadwithdefault,
			{
				sorting: {ctor: '[]'},
				items: _elm_lang$core$Dict$empty
			},
			A2(
				_elm_lang$core$Json_Decode$field,
				'ITEMS',
				_user$project$Decoderhelper$pseudolist(
					A3(
						_elm_lang$core$Json_Decode$map2,
						F2(
							function (x, y) {
								return {sorting: x, items: y};
							}),
						A2(
							_elm_lang$core$Json_Decode$field,
							'SORTING',
							_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int)),
						A2(
							_user$project$Decoderhelper$intDictDecoder,
							A4(_user$project$Term$Term, -1, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
							A5(
								_elm_lang$core$Json_Decode$map4,
								_user$project$Term$Term,
								A2(_elm_lang$core$Json_Decode$field, 'ITEM_ID', _user$project$Decoderhelper$stringAsInt),
								A2(_elm_lang$core$Json_Decode$field, 'ITEM_NAME', _elm_lang$core$Json_Decode$string),
								_elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing),
								_elm_lang$core$Json_Decode$maybe(
									A2(_elm_lang$core$Json_Decode$field, 'ITEM_COUNT', _elm_lang$core$Json_Decode$int))))))))));
var _user$project$Term$TermsResult = F2(
	function (a, b) {
		return {topic: a, terms: b};
	});
var _user$project$Term$termsDecoder = A2(
	_elm_lang$core$Json_Decode$map,
	_user$project$Term$matchTermsortingById,
	A3(
		_elm_lang$core$Json_Decode$map2,
		_user$project$Term$TermsResult,
		A2(
			_elm_lang$core$Json_Decode$field,
			'Topic',
			A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Tuple$mapFirst(
					function (x) {
						return A2(
							_elm_lang$core$Result$withDefault,
							-1,
							_elm_lang$core$String$toInt(x));
					}),
				A2(
					_user$project$Decoderhelper$listheadwithdefault,
					{
						ctor: '_Tuple2',
						_0: '0',
						_1: {
							ctor: '::',
							_0: {id: 0, relevance: 0},
							_1: {ctor: '[]'}
						}
					},
					_elm_lang$core$Json_Decode$keyValuePairs(
						A2(_elm_lang$core$Json_Decode$field, 'Top_Terms', _user$project$Term$termSortingDecoder))))),
		A2(
			_elm_lang$core$Json_Decode$field,
			'Term',
			A2(
				_user$project$Decoderhelper$intDictDecoder,
				A4(_user$project$Term$Term, -1, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
				_user$project$Term$termDecoder))));
